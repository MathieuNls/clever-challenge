#msebs[i] <- (predict(bootsmod[[i]], newdata = data.frame(Serial.No.[-i] + GRE.Score[-i] + TOEFL.Score[-i] +LOR[-i] + CGPA[-i] + Research[-i]))-Chance.of.Admit[i])^2
}
newboots <- list()
bootsmod <- list()
msebs <- NA
bootcoef <- matrix(nrow = 1000, ncol=length(linear$coefficients))
for(i in 1:1000){
newboots[[i]] <- test[sample(1:nrow(test), nrow(test), replace=TRUE),]
bootsmod[[i]] <- lm(University.Rating~., data=newboots[[i]])
for(j in 1:length(linear$coefficients)){
bootcoef[i][j] <- bootsmod[[i]]$coefficients[j]
print(j)
}
#msebs[i] <- (predict(bootsmod[[i]], newdata = data.frame(Serial.No.[-i] + GRE.Score[-i] + TOEFL.Score[-i] +LOR[-i] + CGPA[-i] + Research[-i]))-Chance.of.Admit[i])^2
}
newboots <- list()
bootsmod <- list()
msebs <- NA
bootcoef <- matrix(nrow = 1000, ncol=length(linear$coefficients))
for(i in 1:1000){
newboots[[i]] <- test[sample(1:nrow(test), nrow(test), replace=TRUE),]
bootsmod[[i]] <- lm(University.Rating~., data=newboots[[i]])
bc <- NA
for(j in 1:length(linear$coefficients)){
bc[j] <- bootsmod[[i]]$coefficients[j]
}
bootcoef[i] <- bc
#msebs[i] <- (predict(bootsmod[[i]], newdata = data.frame(Serial.No.[-i] + GRE.Score[-i] + TOEFL.Score[-i] +LOR[-i] + CGPA[-i] + Research[-i]))-Chance.of.Admit[i])^2
}
for(i in 1:length(bootcoef[1])){
print(sd(bootcoef[,i]))
}
bootcoef
newboots <- list()
bootsmod <- list()
msebs <- NA
bootcoef <- matrix(nrow = 1000, ncol=length(linear$coefficients))
for(i in 1:1000){
newboots[[i]] <- test[sample(1:nrow(test), nrow(test), replace=TRUE),]
bootsmod[[i]] <- lm(University.Rating~., data=newboots[[i]])
bc <- c()
for(j in 1:length(linear$coefficients)){
bc <- c(bc, bootsmod[[i]]$coefficients[j])
}
bootcoef[i] <- bc
#msebs[i] <- (predict(bootsmod[[i]], newdata = data.frame(Serial.No.[-i] + GRE.Score[-i] + TOEFL.Score[-i] +LOR[-i] + CGPA[-i] + Research[-i]))-Chance.of.Admit[i])^2
}
for(i in 1:length(bootcoef[1])){
print(sd(bootcoef[,i]))
}
bootcoef
bootsmod[[1]]$coefficients[1]
bootsmod[[1]]$coefficients[2]
bootsmod[[1]]$coefficients
bc <- bootsmod[[1]]$coefficients[1]
bc <- c(bc, bootsmod[[1]]$coefficients[1])
bc
bc <- c(bc, bootsmod[[1]]$coefficients[2])
bc
bootcoef[1] <- bc
newboots <- list()
bootsmod <- list()
msebs <- NA
bootcoef <- data.frame(nrow = 1000, ncol=length(linear$coefficients))
for(i in 1:1000){
newboots[[i]] <- test[sample(1:nrow(test), nrow(test), replace=TRUE),]
bootsmod[[i]] <- lm(University.Rating~., data=newboots[[i]])
bc <- c()
for(j in 1:length(linear$coefficients)){
bc <- c(bc, bootsmod[[i]]$coefficients[j])
}
bootcoef[i] <- bc
#msebs[i] <- (predict(bootsmod[[i]], newdata = data.frame(Serial.No.[-i] + GRE.Score[-i] + TOEFL.Score[-i] +LOR[-i] + CGPA[-i] + Research[-i]))-Chance.of.Admit[i])^2
}
length(linear$coefficients)
bootcoef
?data.frame
matrix?
;
?matrix
newboots <- list()
bootsmod <- list()
msebs <- NA
bootcoef <- matrix(nrow = 1000, ncol=length(linear$coefficients))
for(i in 1:1000){
newboots[[i]] <- test[sample(1:nrow(test), nrow(test), replace=TRUE),]
bootsmod[[i]] <- lm(University.Rating~., data=newboots[[i]])
bc <- c()
for(j in 1:length(linear$coefficients)){
bc <- c(bc, bootsmod[[i]]$coefficients[j])
}
bootcoef[i] <- bc
#msebs[i] <- (predict(bootsmod[[i]], newdata = data.frame(Serial.No.[-i] + GRE.Score[-i] + TOEFL.Score[-i] +LOR[-i] + CGPA[-i] + Research[-i]))-Chance.of.Admit[i])^2
}
for(i in 1:length(bootcoef[1])){
print(sd(bootcoef[,i]))
}
bootcoef[1]
bootcoef[2]
bootcoef[1][1]
bootcoef[1][2]
newboots <- list()
bootsmod <- list()
msebs <- NA
bootcoef <- matrix(nrow = 1000, ncol=length(linear$coefficients))
for(i in 1:1000){
newboots[[i]] <- test[sample(1:nrow(test), nrow(test), replace=TRUE),]
bootsmod[[i]] <- lm(University.Rating~., data=newboots[[i]])
bc <- c()
for(j in 1:length(linear$coefficients)){
bootcoef[i][j] <- bootsmod[[i]]$coefficients[j]
}
#msebs[i] <- (predict(bootsmod[[i]], newdata = data.frame(Serial.No.[-i] + GRE.Score[-i] + TOEFL.Score[-i] +LOR[-i] + CGPA[-i] + Research[-i]))-Chance.of.Admit[i])^2
}
for(i in 1:length(bootcoef[1])){
print(sd(bootcoef[,i]))
}
bootcoef
newboots <- list()
bootsmod <- list()
msebs <- NA
bootcoef <- matrix(nrow = 1000, ncol=length(linear$coefficients))
for(i in 1:1000){
newboots[[i]] <- test[sample(1:nrow(test), nrow(test), replace=TRUE),]
bootsmod[[i]] <- lm(University.Rating~., data=newboots[[i]])
bc <- c()
for(j in 1:length(linear$coefficients)){
bootcoef[i,j] <- bootsmod[[i]]$coefficients[j]
}
#msebs[i] <- (predict(bootsmod[[i]], newdata = data.frame(Serial.No.[-i] + GRE.Score[-i] + TOEFL.Score[-i] +LOR[-i] + CGPA[-i] + Research[-i]))-Chance.of.Admit[i])^2
}
for(i in 1:length(bootcoef[1])){
print(sd(bootcoef[,i]))
}
bootcoef
for(i in 1:length(bootcoef[1])){
+   print(sd(bootcoef[,i]))
+ }
for(i in 1:length(bootcoef[1])){
+   print sd(bootcoef[,i])
+ }
for(i in 1:length(bootcoef[1])){
+  sd(bootcoef[,i])
+ }
sd(bootcoef[,1])
sd(bootcoef[,2])
sd(bootcoef[,3])
newboots <- list()
bootsmod <- list()
msebs <- NA
bootcoef <- matrix(nrow = 1000, ncol=length(linear$coefficients))
for(i in 1:1000){
newboots[[i]] <- test[sample(1:nrow(test), nrow(test), replace=TRUE),]
bootsmod[[i]] <- lm(University.Rating~., data=newboots[[i]])
bc <- c()
for(j in 1:length(linear$coefficients)){
bootcoef[i,j] <- bootsmod[[i]]$coefficients[j]
}
#msebs[i] <- (predict(bootsmod[[i]], newdata = data.frame(Serial.No.[-i] + GRE.Score[-i] + TOEFL.Score[-i] +LOR[-i] + CGPA[-i] + Research[-i]))-Chance.of.Admit[i])^2
}
sd(bootcoef[,1])
sd(bootcoef[,2])
sd(bootcoef[,3])
sd(bootcoef[,4])
sd(bootcoef[,5])
sd(bootcoef[,6])
sd(bootcoef[,7])
newboots <- list()
bootsmod <- list()
msebs <- NA
bootcoef <- matrix(nrow = 1000, ncol=length(linear$coefficients))
for(i in 1:1000){
newboots[[i]] <- test[sample(1:nrow(test), nrow(test), replace=TRUE),]
bootsmod[[i]] <- lm(University.Rating~., data=newboots[[i]])
for(j in 1:length(linear$coefficients)){
bootcoef[i,j] <- bootsmod[[i]]$coefficients[j]
}
#msebs[i] <- (predict(bootsmod[[i]], newdata = data.frame(Serial.No.[-i] + GRE.Score[-i] + TOEFL.Score[-i] +LOR[-i] + CGPA[-i] + Research[-i]))-Chance.of.Admit[i])^2
}
as.matrix(c(sd(bootcoef[,1]),sd(bootcoef[,2]),sd(bootcoef[,3]),sd(bootcoef[,4]),sd(bootcoef[,5]),sd(bootcoef[,6]),sd(bootcoef[,7])), c(sd(coef[,1]),sd(coef[,2]),sd(coef[,3]),sd(coef[,4]),sd(coef[,5]),sd(coef[,6]),sd(coef[,7])))
newboots <- list()
bootsmod <- list()
msebs <- NA
bootcoef <- matrix(nrow = 1000, ncol=length(linear$coefficients))
for(i in 1:1000){
newboots[[i]] <- test[sample(1:nrow(test), nrow(test), replace=TRUE),]
bootsmod[[i]] <- lm(University.Rating~., data=newboots[[i]])
for(j in 1:length(linear$coefficients)){
bootcoef[i,j] <- bootsmod[[i]]$coefficients[j]
}
#msebs[i] <- (predict(bootsmod[[i]], newdata = data.frame(Serial.No.[-i] + GRE.Score[-i] + TOEFL.Score[-i] +LOR[-i] + CGPA[-i] + Research[-i]))-Chance.of.Admit[i])^2
}
as.matrix(c(c(sd(bootcoef[,1]),sd(bootcoef[,2]),sd(bootcoef[,3]),sd(bootcoef[,4]),sd(bootcoef[,5]),sd(bootcoef[,6]),sd(bootcoef[,7])), c(sd(coef[,1]),sd(coef[,2]),sd(coef[,3]),sd(coef[,4]),sd(coef[,5]),sd(coef[,6]),sd(coef[,7]))))
newboots <- list()
bootsmod <- list()
msebs <- NA
bootcoef <- matrix(nrow = 1000, ncol=length(linear$coefficients))
for(i in 1:1000){
newboots[[i]] <- test[sample(1:nrow(test), nrow(test), replace=TRUE),]
bootsmod[[i]] <- lm(University.Rating~., data=newboots[[i]])
for(j in 1:length(linear$coefficients)){
bootcoef[i,j] <- bootsmod[[i]]$coefficients[j]
}
#msebs[i] <- (predict(bootsmod[[i]], newdata = data.frame(Serial.No.[-i] + GRE.Score[-i] + TOEFL.Score[-i] +LOR[-i] + CGPA[-i] + Research[-i]))-Chance.of.Admit[i])^2
}
as.data.frame(c(sd(bootcoef[,1]),sd(bootcoef[,2]),sd(bootcoef[,3]),sd(bootcoef[,4]),sd(bootcoef[,5]),sd(bootcoef[,6]),sd(bootcoef[,7])), c(sd(coef[,1]),sd(coef[,2]),sd(coef[,3]),sd(coef[,4]),sd(coef[,5]),sd(coef[,6]),sd(coef[,7])))
newboots <- list()
bootsmod <- list()
msebs <- NA
bootcoef <- matrix(nrow = 1000, ncol=length(linear$coefficients))
for(i in 1:1000){
newboots[[i]] <- test[sample(1:nrow(test), nrow(test), replace=TRUE),]
bootsmod[[i]] <- lm(University.Rating~., data=newboots[[i]])
for(j in 1:length(linear$coefficients)){
bootcoef[i,j] <- bootsmod[[i]]$coefficients[j]
}
#msebs[i] <- (predict(bootsmod[[i]], newdata = data.frame(Serial.No.[-i] + GRE.Score[-i] + TOEFL.Score[-i] +LOR[-i] + CGPA[-i] + Research[-i]))-Chance.of.Admit[i])^2
}
as.data.frame(c(c(sd(bootcoef[,1]),sd(bootcoef[,2]),sd(bootcoef[,3]),sd(bootcoef[,4]),sd(bootcoef[,5]),sd(bootcoef[,6]),sd(bootcoef[,7])), c(sd(coef[,1]),sd(coef[,2]),sd(coef[,3]),sd(coef[,4]),sd(coef[,5]),sd(coef[,6]),sd(coef[,7]))))
set.seed(7861)
cvlm <- list()
msecv <- NA
coef <-matrix(nrow = 1000, ncol=length(linear$coefficients))
for(i in 1:nrow(test)){
#Fit the linear model
cvlm[[i]] <- lm(Chance.of.Admit[-i] ~ Serial.No.[-i] + GRE.Score[-i] + TOEFL.Score[-i] +LOR[-i] + CGPA[-i] + Research[-i])
# Calculate MSE for ith model
msecv[i] <- (predict(cvlm[[i]], newdata = data.frame(Serial.No.[-i] + GRE.Score[-i] + TOEFL.Score[-i] +LOR[-i] + CGPA[-i] + Research[-i]))-Chance.of.Admit[i])^2
coef[[i]] <- cvlm[[i]]$coefficients
for(j in 1:length(linear$coefficients)){
coef[i,j] <- cvlm[[i]]$coefficients[j]
}
#msecv[i]
}
set.seed(7861)
cvlm <- list()
msecv <- NA
coef <-matrix(nrow = 1000, ncol=length(linear$coefficients))
for(i in 1:nrow(test)){
#Fit the linear model
cvlm[[i]] <- lm(Chance.of.Admit[-i] ~ Serial.No.[-i] + GRE.Score[-i] + TOEFL.Score[-i] +LOR[-i] + CGPA[-i] + Research[-i])
# Calculate MSE for ith model
msecv[i] <- (predict(cvlm[[i]], newdata = data.frame(Serial.No.[-i] + GRE.Score[-i] + TOEFL.Score[-i] +LOR[-i] + CGPA[-i] + Research[-i]))-Chance.of.Admit[i])^2
#coef[[i]] <- cvlm[[i]]$coefficients
for(j in 1:length(linear$coefficients)){
coef[i,j] <- cvlm[[i]]$coefficients[j]
}
#msecv[i]
}
#output mean of MSE
mean(msecv)
newboots <- list()
bootsmod <- list()
msebs <- NA
bootcoef <- matrix(nrow = 1000, ncol=length(linear$coefficients))
for(i in 1:1000){
newboots[[i]] <- test[sample(1:nrow(test), nrow(test), replace=TRUE),]
bootsmod[[i]] <- lm(University.Rating~., data=newboots[[i]])
for(j in 1:length(linear$coefficients)){
bootcoef[i,j] <- bootsmod[[i]]$coefficients[j]
}
#msebs[i] <- (predict(bootsmod[[i]], newdata = data.frame(Serial.No.[-i] + GRE.Score[-i] + TOEFL.Score[-i] +LOR[-i] + CGPA[-i] + Research[-i]))-Chance.of.Admit[i])^2
}
as.data.frame(c(c(sd(bootcoef[,1]),sd(bootcoef[,2]),sd(bootcoef[,3]),sd(bootcoef[,4]),sd(bootcoef[,5]),sd(bootcoef[,6]),sd(bootcoef[,7])), c(sd(coef[,1]),sd(coef[,2]),sd(coef[,3]),sd(coef[,4]),sd(coef[,5]),sd(coef[,6]),sd(coef[,7]))))
newboots <- list()
bootsmod <- list()
msebs <- NA
bootcoef <- matrix(nrow = 1000, ncol=length(linear$coefficients))
for(i in 1:1000){
newboots[[i]] <- test[sample(1:nrow(test), nrow(test), replace=TRUE),]
bootsmod[[i]] <- lm(University.Rating~., data=newboots[[i]])
for(j in 1:length(linear$coefficients)){
bootcoef[i,j] <- bootsmod[[i]]$coefficients[j]
}
#msebs[i] <- (predict(bootsmod[[i]], newdata = data.frame(Serial.No.[-i] + GRE.Score[-i] + TOEFL.Score[-i] +LOR[-i] + CGPA[-i] + Research[-i]))-Chance.of.Admit[i])^2
}
as.matrix(c(c(sd(bootcoef[,1]),sd(bootcoef[,2]),sd(bootcoef[,3]),sd(bootcoef[,4]),sd(bootcoef[,5]),sd(bootcoef[,6]),sd(bootcoef[,7])), c(sd(coef[,1]),sd(coef[,2]),sd(coef[,3]),sd(coef[,4]),sd(coef[,5]),sd(coef[,6]),sd(coef[,7]))))
newboots <- list()
bootsmod <- list()
msebs <- NA
bootcoef <- matrix(nrow = 1000, ncol=length(linear$coefficients))
for(i in 1:1000){
newboots[[i]] <- test[sample(1:nrow(test), nrow(test), replace=TRUE),]
bootsmod[[i]] <- lm(University.Rating~., data=newboots[[i]])
for(j in 1:length(linear$coefficients)){
bootcoef[i,j] <- bootsmod[[i]]$coefficients[j]
}
#msebs[i] <- (predict(bootsmod[[i]], newdata = data.frame(Serial.No.[-i] + GRE.Score[-i] + TOEFL.Score[-i] +LOR[-i] + CGPA[-i] + Research[-i]))-Chance.of.Admit[i])^2
}
c(sd(bootcoef[,1]),sd(bootcoef[,2]),sd(bootcoef[,3]),sd(bootcoef[,4]),sd(bootcoef[,5]),sd(bootcoef[,6]),sd(bootcoef[,7]))
c(sd(coef[,1]),sd(coef[,2]),sd(coef[,3]),sd(coef[,4]),sd(coef[,5]),sd(coef[,6]),sd(coef[,7]))
coef
sd(coef[,1])
bootcoef
c(sd(coef[,1]),sd(coef[,2]),sd(coef[,3]),sd(coef[,4]),sd(coef[,5]),sd(coef[,6]),sd(coef[,7]))
c(sd(bootcoef[,1]),sd(bootcoef[,2]),sd(bootcoef[,3]),sd(bootcoef[,4]),sd(bootcoef[,5]),sd(bootcoef[,6]),sd(bootcoef[,7]))
sd(coef[1,])
coef[,1]
set.seed(7861)
cvlm <- list()
msecv <- NA
coef <-matrix(nrow = length(test), ncol=length(linear$coefficients))
for(i in 1:nrow(test)){
#Fit the linear model
cvlm[[i]] <- lm(Chance.of.Admit[-i] ~ Serial.No.[-i] + GRE.Score[-i] + TOEFL.Score[-i] +LOR[-i] + CGPA[-i] + Research[-i])
# Calculate MSE for ith model
msecv[i] <- (predict(cvlm[[i]], newdata = data.frame(Serial.No.[-i] + GRE.Score[-i] + TOEFL.Score[-i] +LOR[-i] + CGPA[-i] + Research[-i]))-Chance.of.Admit[i])^2
#coef[[i]] <- cvlm[[i]]$coefficients
for(j in 1:length(linear$coefficients)){
coef[i,j] <- cvlm[[i]]$coefficients[j]
}
#msecv[i]
}
length(test)
set.seed(7861)
cvlm <- list()
msecv <- NA
coef <-matrix(nrow = 500, ncol=length(linear$coefficients))
for(i in 1:nrow(test)){
#Fit the linear model
cvlm[[i]] <- lm(Chance.of.Admit[-i] ~ Serial.No.[-i] + GRE.Score[-i] + TOEFL.Score[-i] +LOR[-i] + CGPA[-i] + Research[-i])
# Calculate MSE for ith model
msecv[i] <- (predict(cvlm[[i]], newdata = data.frame(Serial.No.[-i] + GRE.Score[-i] + TOEFL.Score[-i] +LOR[-i] + CGPA[-i] + Research[-i]))-Chance.of.Admit[i])^2
#coef[[i]] <- cvlm[[i]]$coefficients
for(j in 1:length(linear$coefficients)){
coef[i,j] <- cvlm[[i]]$coefficients[j]
}
#msecv[i]
}
#output mean of MSE
mean(msecv)
newboots <- list()
bootsmod <- list()
msebs <- NA
bootcoef <- matrix(nrow = 1000, ncol=length(linear$coefficients))
for(i in 1:1000){
newboots[[i]] <- test[sample(1:nrow(test), nrow(test), replace=TRUE),]
bootsmod[[i]] <- lm(University.Rating~., data=newboots[[i]])
for(j in 1:length(linear$coefficients)){
bootcoef[i,j] <- bootsmod[[i]]$coefficients[j]
}
#msebs[i] <- (predict(bootsmod[[i]], newdata = data.frame(Serial.No.[-i] + GRE.Score[-i] + TOEFL.Score[-i] +LOR[-i] + CGPA[-i] + Research[-i]))-Chance.of.Admit[i])^2
}
c(sd(bootcoef[,1]),sd(bootcoef[,2]),sd(bootcoef[,3]),sd(bootcoef[,4]),sd(bootcoef[,5]),sd(bootcoef[,6]),sd(bootcoef[,7]))
c(sd(coef[,1]),sd(coef[,2]),sd(coef[,3]),sd(coef[,4]),sd(coef[,5]),sd(coef[,6]),sd(coef[,7]))
linear$coefficients
summary(linear)$coefficients
summary(linear)$coefficients[,2]
matrix(c(sd(bootcoef[,1]),sd(bootcoef[,2]),sd(bootcoef[,3]),sd(bootcoef[,4]),sd(bootcoef[,5]),sd(bootcoef[,6]),sd(bootcoef[,7])),c(sd(coef[,1]),sd(coef[,2]),sd(coef[,3]),sd(coef[,4]),sd(coef[,5]),sd(coef[,6]),sd(coef[,7])), summary(linear)$coefficients[,2])
matrix(c(sd(bootcoef[,1]),sd(bootcoef[,2]),sd(bootcoef[,3]),sd(bootcoef[,4]),sd(bootcoef[,5]),sd(bootcoef[,6]),sd(bootcoef[,7])),c(sd(coef[,1]),sd(coef[,2]),sd(coef[,3]),sd(coef[,4]),sd(coef[,5]),sd(coef[,6]),sd(coef[,7])))
newboots <- list()
bootsmod <- list()
msebs <- NA
bootcoef <- matrix(nrow = 1000, ncol=length(linear$coefficients))
for(i in 1:1000){
newboots[[i]] <- test[sample(1:nrow(test), nrow(test), replace=TRUE),]
bootsmod[[i]] <- lm(University.Rating~., data=newboots[[i]])
for(j in 1:length(linear$coefficients)){
bootcoef[i,j] <- bootsmod[[i]]$coefficients[j]
}
#msebs[i] <- (predict(bootsmod[[i]], newdata = data.frame(Serial.No.[-i] + GRE.Score[-i] + TOEFL.Score[-i] +LOR[-i] + CGPA[-i] + Research[-i]))-Chance.of.Admit[i])^2
}
summary(linear)$coefficients[,2]
c(sd(bootcoef[,1]),sd(bootcoef[,2]),sd(bootcoef[,3]),sd(bootcoef[,4]),sd(bootcoef[,5]),sd(bootcoef[,6]),sd(bootcoef[,7]))
c(sd(coef[,1]),sd(coef[,2]),sd(coef[,3]),sd(coef[,4]),sd(coef[,5]),sd(coef[,6]),sd(coef[,7]))
newboots <- list()
bootsmod <- list()
msebs <- NA
B <- 5000
bootcoef <- matrix(nrow = B, ncol=length(linear$coefficients))
for(i in 1:B){
newboots[[i]] <- test[sample(1:nrow(test), nrow(test), replace=TRUE),]
bootsmod[[i]] <- lm(University.Rating~., data=newboots[[i]])
for(j in 1:length(linear$coefficients)){
bootcoef[i,j] <- bootsmod[[i]]$coefficients[j]
}
#msebs[i] <- (predict(bootsmod[[i]], newdata = data.frame(Serial.No.[-i] + GRE.Score[-i] + TOEFL.Score[-i] +LOR[-i] + CGPA[-i] + Research[-i]))-Chance.of.Admit[i])^2
}
summary(linear)$coefficients[,2]
c(sd(bootcoef[,1]),sd(bootcoef[,2]),sd(bootcoef[,3]),sd(bootcoef[,4]),sd(bootcoef[,5]),sd(bootcoef[,6]),sd(bootcoef[,7]))
c(sd(coef[,1]),sd(coef[,2]),sd(coef[,3]),sd(coef[,4]),sd(coef[,5]),sd(coef[,6]),sd(coef[,7]))
knitr::opts_chunk$set(echo = TRUE)
library(FNN)
library(mvtnorm)
library(mclust)
library(cluster)
library(fpc)
library(boot)
library(tree)
library(MASS)
library(randomForest)
admissionsData <- read.csv("Admission_Predict_Ver1.1.csv")
#summary (admissionsData)
attach(admissionsData)
#Admission_Predict_Ver1.1 <- read.csv("~/Google Drive/Year 3 - S2 Class Files/DATA 311/Project/graduate-admissions/Admission_Predict_Ver1.1.csv")
#View(Admission_Predict_Ver1.1)
head(admissionsData)
admissionsData <- read.csv("Admission_Predict_Ver1.1.csv")
#summary (admissionsData)
attach(admissionsData)
#Admission_Predict_Ver1.1 <- read.csv("~/Google Drive/Year 3 - S2 Class Files/DATA 311/Project/graduate-admissions/Admission_Predict_Ver1.1.csv")
#View(Admission_Predict_Ver1.1)
head(admissionsData[,-1])
knitr::opts_chunk$set(echo = TRUE)
library(FNN)
library(mvtnorm)
library(mclust)
library(cluster)
library(fpc)
library(boot)
library(tree)
library(MASS)
library(randomForest)
hms <- hclust(na.omit(dg), method="single")
knitr::opts_chunk$set(echo = TRUE)
library(FNN)
library(mvtnorm)
library(mclust)
library(cluster)
library(fpc)
library(boot)
library(tree)
library(MASS)
library(randomForest)
admissionsData <- read.csv("Admission_Predict_Ver1.1.csv")
#summary (admissionsData)
attach(admissionsData)
#Admission_Predict_Ver1.1 <- read.csv("~/Google Drive/Year 3 - S2 Class Files/DATA 311/Project/graduate-admissions/Admission_Predict_Ver1.1.csv")
#View(Admission_Predict_Ver1.1)
head(admissionsData[,-1])
dg<-daisy(admissionsData, metric="gower")
pdist <- cmdscale(d=dg)
plot(pdist)
hms <- hclust(na.omit(dg), method="single")
#plot(hms)
pairs(pdist, col=cutree(hms,2))
#plot(pdist)
setwd("~/Documents/Ubisoft/Technical Test/clever-challenge")
source('~/Documents/Ubisoft/Technical Test/clever-challenge/seq.R')
varImpPlot(rf)
glm(factor(class) ~ ., data=data.frame(sample[,-1]))
simlog <- glm(factor(class) ~ sample[,-1], family="binomial")
simlog <- glm(factor(class) ~ ., family="binomial", data=sample[,1])
simlog <- glm(formula=factor(class) ~ ., family="binomial", data=sample[,1])
simlog <- glm(formula=factor(class) ~ sample[,1], family="binomial", data=sample[,1])
simlog <- glm(factor(class) ~ sample, family="binomial")
simdat <- sample[,-1]
simlog <- glm(factor(class) ~ simdat, family="binomial")
View(simlog)
simlog
simdat <- as.data.frame(sample[,-1])
simlog <- glm(factor(class) ~ simdat, family="binomial")
simlog <- glm(class ~ simdat, family="binomial")
simdat <- as.matrix(sample[,-1])
simlog <- glm(class ~ simdat, family="binomial")
simlog <- glm(factor(class) ~ simdat, family="binomial")
simdat <- c(sample$f4, sample$timestamp, sample$f3.1, sample$f3, sample$f8, sample$f5, sample$f10, sample$f6, sample$f9, sample$f12, sample$f13, sample$f7, sample$f17, sample$f15, sample$f2)
simdat <- c(sample$f4, sample$timestamp, sample$f3.1, sample$f3, sample$f8, sample$f5, sample$f10, sample$f6, sample$f9, sample$f12, sample$f13, sample$f7, sample$f17, sample$f15, sample$f2, sample$class)
glm(factor(class) ~ simdat, family="binomial")
glm(as.formula(factor(class) ~ simdat), family="binomial")
?unique
glm(class ~ simdat, family="binomial")
glm(class ~ as.matrix(simdat), family="binomial")
simdat$class
simdat["class"]
simdat <- as.matrix(sample$f4, sample$timestamp, sample$f3.1, sample$f3, sample$f8, sample$f5, sample$f10, sample$f6, sample$f9, sample$f12, sample$f13, sample$f7, sample$f17, sample$f15, sample$f2, sample$class)
simdat
View(simdat)
simdat <- as.data.frame(sample$f4, sample$timestamp, sample$f3.1, sample$f3, sample$f8, sample$f5, sample$f10, sample$f6, sample$f9, sample$f12, sample$f13, sample$f7, sample$f17, sample$f15, sample$f2, sample$class)
View(sample)
simdat <- sample[,-c(1,4,24,17,21,23,14,19,22,25,26,27,28,29,30,31)]
simdat
glm(class ~ simdat, family="binomial")
glm(class ~ ., family="binomial", data=as.matrix(simdat))
glm(class ~ ., family="binomial", data=simdat)
simlog <- glm(class ~ ., family="binomial", data=simdat)
table(predict(simlog, type="response") > 0.5, sample$class)
table(predict(rf, newdata=sample[,-1]), sample$class)
library(gclus)
??gclus
?glcus
?hclust
plot(sample$event_id, sample$timestamp)
plot(sample$timestamp, sample$f14)
plot(sample$timestamp, sample$f4)
plot(sample$timestamp, sample$class)
?hclust
dg<-daisy(sample[,-1], metric="gower")
install.packages(insect)
install.packages("insect")
?insect
library(insect)
install.packages("sequential")
install.packages("Sequential")
library(Sequential)
??Sequential
?CV.G.Binomial
??neuralnet
??nn
knitr::opts_chunk$set(echo = TRUE)
library(glmnet)
library(neuralnet)
library(NeuralNetTools)
library(nnet)
library(randomForest)
set.seed(212919156)
sample <- read.csv("seq/sample.csv")
sample$class = factor(sample$class)
#Use a random forest to generate a model to predict class
rf <- randomForest(factor(class)~., data=data.frame(sample[,-1]))
#Now look at the Variable Importance Plot of the Random Forest to determine relevant variables to the model
varImpPlot(rf)
